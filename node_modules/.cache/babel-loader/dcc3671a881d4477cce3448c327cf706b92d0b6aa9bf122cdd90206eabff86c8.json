{"ast":null,"code":"var _jsxFileName = \"/Users/ansh/Documents/projects/workspace/personal/asd-1/src/components/StockChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\n\n// Register all necessary components, including scales\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst StockChart = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    // Destroy the previous chart instance if it exists\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.destroy();\n    }\n\n    // Create a new chart instance\n    chartInstanceRef.current = new Chart(chartRef.current, {\n      type: 'line',\n      // Change to the desired chart type\n      data: {\n        labels: data.map(point => point.date),\n        // Use 'date' for labels\n        datasets: [{\n          label: 'Stock Price',\n          data: data.map(point => point.close),\n          // Use 'close' for stock prices\n          pointRadius: 0,\n          fill: false,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)'\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'category',\n            // Ensure this scale type is registered\n            title: {\n              display: true,\n              text: 'Date'\n            }\n          },\n          y: {\n            beginAtZero: false,\n            title: {\n              display: true,\n              text: 'Price'\n            }\n          }\n        }\n      }\n    });\n\n    // Cleanup function to destroy the chart on unmount\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n      }\n    };\n  }, [data]); // Re-run effect when data changes\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 12\n  }, this);\n};\n_s(StockChart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = StockChart;\nexport default StockChart;\nvar _c;\n$RefreshReg$(_c, \"StockChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","registerables","jsxDEV","_jsxDEV","register","StockChart","data","_s","chartRef","chartInstanceRef","current","destroy","type","labels","map","point","date","datasets","label","close","pointRadius","fill","backgroundColor","borderColor","options","scales","x","title","display","text","y","beginAtZero","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ansh/Documents/projects/workspace/personal/asd-1/src/components/StockChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\n\n// Register all necessary components, including scales\nChart.register(...registerables);\n\nconst StockChart = ({ data }) => {\n    const chartRef = useRef(null);\n    const chartInstanceRef = useRef(null);\n\n    useEffect(() => {\n        // Destroy the previous chart instance if it exists\n        if (chartInstanceRef.current) {\n            chartInstanceRef.current.destroy();\n        }\n\n        // Create a new chart instance\n        chartInstanceRef.current = new Chart(chartRef.current, {\n            type: 'line', // Change to the desired chart type\n            data: {\n                labels: data.map(point => point.date), // Use 'date' for labels\n                datasets: [\n                    {\n                        label: 'Stock Price',\n                        data: data.map(point => point.close), // Use 'close' for stock prices\n                        pointRadius: 0,\n                        fill: false,\n                        backgroundColor: 'rgba(75,192,192,0.4)',\n                        borderColor: 'rgba(75,192,192,1)',\n                    },\n                ],\n            },\n            options: {\n                scales: {\n                    x: {\n                        type: 'category', // Ensure this scale type is registered\n                        title: {\n                            display: true,\n                            text: 'Date',\n                        },\n                    },\n                    y: {\n                        beginAtZero: false,\n                        title: {\n                            display: true,\n                            text: 'Price',\n                        },\n                    },\n                },\n            },\n        });\n\n        // Cleanup function to destroy the chart on unmount\n        return () => {\n            if (chartInstanceRef.current) {\n                chartInstanceRef.current.destroy();\n            }\n        };\n    }, [data]); // Re-run effect when data changes\n\n    return <canvas ref={chartRef} />;\n};\n\nexport default StockChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAH,KAAK,CAACI,QAAQ,CAAC,GAAGH,aAAa,CAAC;AAEhC,MAAMI,UAAU,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMU,gBAAgB,GAAGV,MAAM,CAAC,IAAI,CAAC;EAErCD,SAAS,CAAC,MAAM;IACZ;IACA,IAAIW,gBAAgB,CAACC,OAAO,EAAE;MAC1BD,gBAAgB,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;IACtC;;IAEA;IACAF,gBAAgB,CAACC,OAAO,GAAG,IAAIV,KAAK,CAACQ,QAAQ,CAACE,OAAO,EAAE;MACnDE,IAAI,EAAE,MAAM;MAAE;MACdN,IAAI,EAAE;QACFO,MAAM,EAAEP,IAAI,CAACQ,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC;QAAE;QACvCC,QAAQ,EAAE,CACN;UACIC,KAAK,EAAE,aAAa;UACpBZ,IAAI,EAAEA,IAAI,CAACQ,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACI,KAAK,CAAC;UAAE;UACtCC,WAAW,EAAE,CAAC;UACdC,IAAI,EAAE,KAAK;UACXC,eAAe,EAAE,sBAAsB;UACvCC,WAAW,EAAE;QACjB,CAAC;MAET,CAAC;MACDC,OAAO,EAAE;QACLC,MAAM,EAAE;UACJC,CAAC,EAAE;YACCd,IAAI,EAAE,UAAU;YAAE;YAClBe,KAAK,EAAE;cACHC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACV;UACJ,CAAC;UACDC,CAAC,EAAE;YACCC,WAAW,EAAE,KAAK;YAClBJ,KAAK,EAAE;cACHC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACV;UACJ;QACJ;MACJ;IACJ,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACT,IAAIpB,gBAAgB,CAACC,OAAO,EAAE;QAC1BD,gBAAgB,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;MACtC;IACJ,CAAC;EACL,CAAC,EAAE,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEZ,oBAAOH,OAAA;IAAQ6B,GAAG,EAAExB;EAAS;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACpC,CAAC;AAAC7B,EAAA,CAvDIF,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AAyDhB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}